// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Address represents a row from 'public.address'.
type Address struct {
	AddressID  int            `json:"address_id"`  // address_id
	Address    string         `json:"address"`     // address
	Address2   sql.NullString `json:"address2"`    // address2
	District   string         `json:"district"`    // district
	CityID     int16          `json:"city_id"`     // city_id
	PostalCode sql.NullString `json:"postal_code"` // postal_code
	Phone      string         `json:"phone"`       // phone
	LastUpdate time.Time      `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Address exists in the database.
func (a *Address) Exists() bool {
	return a._exists
}

// Deleted provides information if the Address has been deleted from the database.
func (a *Address) Deleted() bool {
	return a._deleted
}

// Insert inserts the Address to the database.
func (a *Address) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.address (` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`)`

	// run query
	XOLog(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate)
	err = db.QueryRow(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate).Scan(&a.AddressID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Address in the database.
func (a *Address) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.address SET (` +
		`address, address2, district, city_id, postal_code, phone, last_update` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) WHERE address_id = $8`

	// run query
	XOLog(sqlstr, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate, a.AddressID)
	_, err = db.Exec(sqlstr, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate, a.AddressID)
	return err
}

// Save saves the Address to the database.
func (a *Address) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Address.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Address) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.address (` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8` +
		`) ON CONFLICT (address_id) DO UPDATE SET (` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update` +
		`) = (` +
		`EXCLUDED.address_id, EXCLUDED.address, EXCLUDED.address2, EXCLUDED.district, EXCLUDED.city_id, EXCLUDED.postal_code, EXCLUDED.phone, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate)
	_, err = db.Exec(sqlstr, a.AddressID, a.Address, a.Address2, a.District, a.CityID, a.PostalCode, a.Phone, a.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Address from the database.
func (a *Address) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.address WHERE address_id = $1`

	// run query
	XOLog(sqlstr, a.AddressID)
	_, err = db.Exec(sqlstr, a.AddressID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// City returns the City associated with the Address's CityID (city_id).
//
// Generated from foreign key 'fk_address_city'.
func (a *Address) City(db XODB) (*City, error) {
	return CityByCityID(db, int(a.CityID))
}

// AddressByAddressID retrieves a row from 'public.address' as a Address.
//
// Generated from index 'address_pkey'.
func AddressByAddressID(db XODB, addressID int) (*Address, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update ` +
		`FROM public.address ` +
		`WHERE address_id = $1`

	// run query
	XOLog(sqlstr, addressID)
	a := Address{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, addressID).Scan(&a.AddressID, &a.Address, &a.Address2, &a.District, &a.CityID, &a.PostalCode, &a.Phone, &a.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// AddressesByCityID retrieves a row from 'public.address' as a Address.
//
// Generated from index 'idx_fk_city_id'.
func AddressesByCityID(db XODB, cityID int16) ([]*Address, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`address_id, address, address2, district, city_id, postal_code, phone, last_update ` +
		`FROM public.address ` +
		`WHERE city_id = $1`

	// run query
	XOLog(sqlstr, cityID)
	q, err := db.Query(sqlstr, cityID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Address{}
	for q.Next() {
		a := Address{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.AddressID, &a.Address, &a.Address2, &a.District, &a.CityID, &a.PostalCode, &a.Phone, &a.LastUpdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
