// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
	"github.com/lib/pq"
)

// Customer represents a row from 'public.customer'.
type Customer struct {
	CustomerID int            `json:"customer_id"` // customer_id
	StoreID    int16          `json:"store_id"`    // store_id
	FirstName  string         `json:"first_name"`  // first_name
	LastName   string         `json:"last_name"`   // last_name
	Email      sql.NullString `json:"email"`       // email
	AddressID  int16          `json:"address_id"`  // address_id
	Activebool bool           `json:"activebool"`  // activebool
	CreateDate time.Time      `json:"create_date"` // create_date
	LastUpdate pq.NullTime    `json:"last_update"` // last_update
	Active     sql.NullInt64  `json:"active"`      // active

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Customer exists in the database.
func (c *Customer) Exists() bool {
	return c._exists
}

// Deleted provides information if the Customer has been deleted from the database.
func (c *Customer) Deleted() bool {
	return c._deleted
}

// Insert inserts the Customer to the database.
func (c *Customer) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.customer (` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`)`

	// run query
	XOLog(sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active)
	err = db.QueryRow(sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active).Scan(&c.CustomerID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Customer in the database.
func (c *Customer) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.customer SET (` +
		`store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9` +
		`) WHERE customer_id = $10`

	// run query
	XOLog(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active, c.CustomerID)
	_, err = db.Exec(sqlstr, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active, c.CustomerID)
	return err
}

// Save saves the Customer to the database.
func (c *Customer) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Customer.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Customer) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.customer (` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) ON CONFLICT (customer_id) DO UPDATE SET (` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active` +
		`) = (` +
		`EXCLUDED.customer_id, EXCLUDED.store_id, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.email, EXCLUDED.address_id, EXCLUDED.activebool, EXCLUDED.create_date, EXCLUDED.last_update, EXCLUDED.active` +
		`)`

	// run query
	XOLog(sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active)
	_, err = db.Exec(sqlstr, c.CustomerID, c.StoreID, c.FirstName, c.LastName, c.Email, c.AddressID, c.Activebool, c.CreateDate, c.LastUpdate, c.Active)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Customer from the database.
func (c *Customer) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.customer WHERE customer_id = $1`

	// run query
	XOLog(sqlstr, c.CustomerID)
	_, err = db.Exec(sqlstr, c.CustomerID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// Address returns the Address associated with the Customer's AddressID (address_id).
//
// Generated from foreign key 'customer_address_id_fkey'.
func (c *Customer) Address(db XODB) (*Address, error) {
	return AddressByAddressID(db, int(c.AddressID))
}

// CustomerByCustomerID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'customer_pkey'.
func CustomerByCustomerID(db XODB, customerID int) (*Customer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active ` +
		`FROM public.customer ` +
		`WHERE customer_id = $1`

	// run query
	XOLog(sqlstr, customerID)
	c := Customer{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, customerID).Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Activebool, &c.CreateDate, &c.LastUpdate, &c.Active)
	if err != nil {
		return nil, err
	}

	return &c, nil
}

// CustomersByAddressID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'idx_fk_address_id'.
func CustomersByAddressID(db XODB, addressID int16) ([]*Customer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active ` +
		`FROM public.customer ` +
		`WHERE address_id = $1`

	// run query
	XOLog(sqlstr, addressID)
	q, err := db.Query(sqlstr, addressID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Customer{}
	for q.Next() {
		c := Customer{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Activebool, &c.CreateDate, &c.LastUpdate, &c.Active)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CustomersByStoreID retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'idx_fk_store_id'.
func CustomersByStoreID(db XODB, storeID int16) ([]*Customer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active ` +
		`FROM public.customer ` +
		`WHERE store_id = $1`

	// run query
	XOLog(sqlstr, storeID)
	q, err := db.Query(sqlstr, storeID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Customer{}
	for q.Next() {
		c := Customer{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Activebool, &c.CreateDate, &c.LastUpdate, &c.Active)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}

// CustomersByLastName retrieves a row from 'public.customer' as a Customer.
//
// Generated from index 'idx_last_name'.
func CustomersByLastName(db XODB, lastName string) ([]*Customer, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`customer_id, store_id, first_name, last_name, email, address_id, activebool, create_date, last_update, active ` +
		`FROM public.customer ` +
		`WHERE last_name = $1`

	// run query
	XOLog(sqlstr, lastName)
	q, err := db.Query(sqlstr, lastName)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Customer{}
	for q.Next() {
		c := Customer{
			_exists: true,
		}

		// scan
		err = q.Scan(&c.CustomerID, &c.StoreID, &c.FirstName, &c.LastName, &c.Email, &c.AddressID, &c.Activebool, &c.CreateDate, &c.LastUpdate, &c.Active)
		if err != nil {
			return nil, err
		}

		res = append(res, &c)
	}

	return res, nil
}
