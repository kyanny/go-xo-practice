// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// FilmCategory represents a row from 'public.film_category'.
type FilmCategory struct {
	FilmID     int16     `json:"film_id"`     // film_id
	CategoryID int16     `json:"category_id"` // category_id
	LastUpdate time.Time `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FilmCategory exists in the database.
func (fc *FilmCategory) Exists() bool {
	return fc._exists
}

// Deleted provides information if the FilmCategory has been deleted from the database.
func (fc *FilmCategory) Deleted() bool {
	return fc._deleted
}

// Insert inserts the FilmCategory to the database.
func (fc *FilmCategory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.film_category (` +
		`film_id, category_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate)
	err = db.QueryRow(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate).Scan(&fc.CategoryID)
	if err != nil {
		return err
	}

	// set existence
	fc._exists = true

	return nil
}

// Update updates the FilmCategory in the database.
func (fc *FilmCategory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fc._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fc._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE public.film_category SET (` +
		`last_update` +
		`) = ( ` +
		`$1` +
		`) WHERE film_id = $2 AND category_id = $3`

	// run query
	XOLog(sqlstr, fc.LastUpdate, fc.FilmID, fc.CategoryID)
	_, err = db.Exec(sqlstr, fc.LastUpdate, fc.FilmID, fc.CategoryID)
	return err
}

// Save saves the FilmCategory to the database.
func (fc *FilmCategory) Save(db XODB) error {
	if fc.Exists() {
		return fc.Update(db)
	}

	return fc.Insert(db)
}

// Upsert performs an upsert for FilmCategory.
//
// NOTE: PostgreSQL 9.5+ only
func (fc *FilmCategory) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fc._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.film_category (` +
		`film_id, category_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (film_id, category_id) DO UPDATE SET (` +
		`film_id, category_id, last_update` +
		`) = (` +
		`EXCLUDED.film_id, EXCLUDED.category_id, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate)
	_, err = db.Exec(sqlstr, fc.FilmID, fc.CategoryID, fc.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	fc._exists = true

	return nil
}

// Delete deletes the FilmCategory from the database.
func (fc *FilmCategory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fc._exists {
		return nil
	}

	// if deleted, bail
	if fc._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.film_category  WHERE film_id = $1 AND category_id = $2`

	// run query
	XOLog(sqlstr, fc.FilmID, fc.CategoryID)
	_, err = db.Exec(sqlstr, fc.FilmID, fc.CategoryID)
	if err != nil {
		return err
	}

	// set deleted
	fc._deleted = true

	return nil
}

// Category returns the Category associated with the FilmCategory's CategoryID (category_id).
//
// Generated from foreign key 'film_category_category_id_fkey'.
func (fc *FilmCategory) Category(db XODB) (*Category, error) {
	return CategoryByCategoryID(db, int(fc.CategoryID))
}

// Film returns the Film associated with the FilmCategory's FilmID (film_id).
//
// Generated from foreign key 'film_category_film_id_fkey'.
func (fc *FilmCategory) Film(db XODB) (*Film, error) {
	return FilmByFilmID(db, int(fc.FilmID))
}

// FilmCategoryByFilmIDCategoryID retrieves a row from 'public.film_category' as a FilmCategory.
//
// Generated from index 'film_category_pkey'.
func FilmCategoryByFilmIDCategoryID(db XODB, filmID int16, categoryID int16) (*FilmCategory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`film_id, category_id, last_update ` +
		`FROM public.film_category ` +
		`WHERE film_id = $1 AND category_id = $2`

	// run query
	XOLog(sqlstr, filmID, categoryID)
	fc := FilmCategory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, filmID, categoryID).Scan(&fc.FilmID, &fc.CategoryID, &fc.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &fc, nil
}
