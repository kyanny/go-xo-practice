// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Film represents a row from 'public.film'.
type Film struct {
	FilmID          int              `json:"film_id"`          // film_id
	Title           string           `json:"title"`            // title
	Description     sql.NullString   `json:"description"`      // description
	ReleaseYear     Year             `json:"release_year"`     // release_year
	LanguageID      int16            `json:"language_id"`      // language_id
	RentalDuration  int16            `json:"rental_duration"`  // rental_duration
	RentalRate      float64          `json:"rental_rate"`      // rental_rate
	Length          sql.NullInt64    `json:"length"`           // length
	ReplacementCost float64          `json:"replacement_cost"` // replacement_cost
	Rating          MpaaRating       `json:"rating"`           // rating
	LastUpdate      time.Time        `json:"last_update"`      // last_update
	SpecialFeatures []sql.NullString `json:"special_features"` // special_features
	Fulltext        Tsvector         `json:"fulltext"`         // fulltext

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Film exists in the database.
func (f *Film) Exists() bool {
	return f._exists
}

// Deleted provides information if the Film has been deleted from the database.
func (f *Film) Deleted() bool {
	return f._deleted
}

// Insert inserts the Film to the database.
func (f *Film) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.film (` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`)`

	// run query
	XOLog(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext)
	err = db.QueryRow(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext).Scan(&f.FilmID)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Update updates the Film in the database.
func (f *Film) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if f._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.film SET (` +
		`title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12` +
		`) WHERE film_id = $13`

	// run query
	XOLog(sqlstr, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext, f.FilmID)
	_, err = db.Exec(sqlstr, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext, f.FilmID)
	return err
}

// Save saves the Film to the database.
func (f *Film) Save(db XODB) error {
	if f.Exists() {
		return f.Update(db)
	}

	return f.Insert(db)
}

// Upsert performs an upsert for Film.
//
// NOTE: PostgreSQL 9.5+ only
func (f *Film) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if f._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.film (` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13` +
		`) ON CONFLICT (film_id) DO UPDATE SET (` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext` +
		`) = (` +
		`EXCLUDED.film_id, EXCLUDED.title, EXCLUDED.description, EXCLUDED.release_year, EXCLUDED.language_id, EXCLUDED.rental_duration, EXCLUDED.rental_rate, EXCLUDED.length, EXCLUDED.replacement_cost, EXCLUDED.rating, EXCLUDED.last_update, EXCLUDED.special_features, EXCLUDED.fulltext` +
		`)`

	// run query
	XOLog(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext)
	_, err = db.Exec(sqlstr, f.FilmID, f.Title, f.Description, f.ReleaseYear, f.LanguageID, f.RentalDuration, f.RentalRate, f.Length, f.ReplacementCost, f.Rating, f.LastUpdate, f.SpecialFeatures, f.Fulltext)
	if err != nil {
		return err
	}

	// set existence
	f._exists = true

	return nil
}

// Delete deletes the Film from the database.
func (f *Film) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !f._exists {
		return nil
	}

	// if deleted, bail
	if f._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.film WHERE film_id = $1`

	// run query
	XOLog(sqlstr, f.FilmID)
	_, err = db.Exec(sqlstr, f.FilmID)
	if err != nil {
		return err
	}

	// set deleted
	f._deleted = true

	return nil
}

// Language returns the Language associated with the Film's LanguageID (language_id).
//
// Generated from foreign key 'film_language_id_fkey'.
func (f *Film) Language(db XODB) (*Language, error) {
	return LanguageByLanguageID(db, int(f.LanguageID))
}

// FilmsByFulltext retrieves a row from 'public.film' as a Film.
//
// Generated from index 'film_fulltext_idx'.
func FilmsByFulltext(db XODB, fulltext Tsvector) ([]*Film, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE fulltext = $1`

	// run query
	XOLog(sqlstr, fulltext)
	q, err := db.Query(sqlstr, fulltext)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Film{}
	for q.Next() {
		f := Film{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FilmByFilmID retrieves a row from 'public.film' as a Film.
//
// Generated from index 'film_pkey'.
func FilmByFilmID(db XODB, filmID int) (*Film, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE film_id = $1`

	// run query
	XOLog(sqlstr, filmID)
	f := Film{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, filmID).Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext)
	if err != nil {
		return nil, err
	}

	return &f, nil
}

// FilmsByLanguageID retrieves a row from 'public.film' as a Film.
//
// Generated from index 'idx_fk_language_id'.
func FilmsByLanguageID(db XODB, languageID int16) ([]*Film, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE language_id = $1`

	// run query
	XOLog(sqlstr, languageID)
	q, err := db.Query(sqlstr, languageID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Film{}
	for q.Next() {
		f := Film{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}

// FilmsByTitle retrieves a row from 'public.film' as a Film.
//
// Generated from index 'idx_title'.
func FilmsByTitle(db XODB, title string) ([]*Film, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`film_id, title, description, release_year, language_id, rental_duration, rental_rate, length, replacement_cost, rating, last_update, special_features, fulltext ` +
		`FROM public.film ` +
		`WHERE title = $1`

	// run query
	XOLog(sqlstr, title)
	q, err := db.Query(sqlstr, title)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Film{}
	for q.Next() {
		f := Film{
			_exists: true,
		}

		// scan
		err = q.Scan(&f.FilmID, &f.Title, &f.Description, &f.ReleaseYear, &f.LanguageID, &f.RentalDuration, &f.RentalRate, &f.Length, &f.ReplacementCost, &f.Rating, &f.LastUpdate, &f.SpecialFeatures, &f.Fulltext)
		if err != nil {
			return nil, err
		}

		res = append(res, &f)
	}

	return res, nil
}
