// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// FilmActor represents a row from 'public.film_actor'.
type FilmActor struct {
	ActorID    int16     `json:"actor_id"`    // actor_id
	FilmID     int16     `json:"film_id"`     // film_id
	LastUpdate time.Time `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the FilmActor exists in the database.
func (fa *FilmActor) Exists() bool {
	return fa._exists
}

// Deleted provides information if the FilmActor has been deleted from the database.
func (fa *FilmActor) Deleted() bool {
	return fa._deleted
}

// Insert inserts the FilmActor to the database.
func (fa *FilmActor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if fa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.film_actor (` +
		`actor_id, film_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate)
	err = db.QueryRow(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate).Scan(&fa.FilmID)
	if err != nil {
		return err
	}

	// set existence
	fa._exists = true

	return nil
}

// Update updates the FilmActor in the database.
func (fa *FilmActor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if fa._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query with composite primary key
	const sqlstr = `UPDATE public.film_actor SET (` +
		`last_update` +
		`) = ( ` +
		`$1` +
		`) WHERE actor_id = $2 AND film_id = $3`

	// run query
	XOLog(sqlstr, fa.LastUpdate, fa.ActorID, fa.FilmID)
	_, err = db.Exec(sqlstr, fa.LastUpdate, fa.ActorID, fa.FilmID)
	return err
}

// Save saves the FilmActor to the database.
func (fa *FilmActor) Save(db XODB) error {
	if fa.Exists() {
		return fa.Update(db)
	}

	return fa.Insert(db)
}

// Upsert performs an upsert for FilmActor.
//
// NOTE: PostgreSQL 9.5+ only
func (fa *FilmActor) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if fa._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.film_actor (` +
		`actor_id, film_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (actor_id, film_id) DO UPDATE SET (` +
		`actor_id, film_id, last_update` +
		`) = (` +
		`EXCLUDED.actor_id, EXCLUDED.film_id, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate)
	_, err = db.Exec(sqlstr, fa.ActorID, fa.FilmID, fa.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	fa._exists = true

	return nil
}

// Delete deletes the FilmActor from the database.
func (fa *FilmActor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !fa._exists {
		return nil
	}

	// if deleted, bail
	if fa._deleted {
		return nil
	}

	// sql query with composite primary key
	const sqlstr = `DELETE FROM public.film_actor  WHERE actor_id = $1 AND film_id = $2`

	// run query
	XOLog(sqlstr, fa.ActorID, fa.FilmID)
	_, err = db.Exec(sqlstr, fa.ActorID, fa.FilmID)
	if err != nil {
		return err
	}

	// set deleted
	fa._deleted = true

	return nil
}

// Actor returns the Actor associated with the FilmActor's ActorID (actor_id).
//
// Generated from foreign key 'film_actor_actor_id_fkey'.
func (fa *FilmActor) Actor(db XODB) (*Actor, error) {
	return ActorByActorID(db, int(fa.ActorID))
}

// Film returns the Film associated with the FilmActor's FilmID (film_id).
//
// Generated from foreign key 'film_actor_film_id_fkey'.
func (fa *FilmActor) Film(db XODB) (*Film, error) {
	return FilmByFilmID(db, int(fa.FilmID))
}

// FilmActorByActorIDFilmID retrieves a row from 'public.film_actor' as a FilmActor.
//
// Generated from index 'film_actor_pkey'.
func FilmActorByActorIDFilmID(db XODB, actorID int16, filmID int16) (*FilmActor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`actor_id, film_id, last_update ` +
		`FROM public.film_actor ` +
		`WHERE actor_id = $1 AND film_id = $2`

	// run query
	XOLog(sqlstr, actorID, filmID)
	fa := FilmActor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, actorID, filmID).Scan(&fa.ActorID, &fa.FilmID, &fa.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &fa, nil
}

// FilmActorsByFilmID retrieves a row from 'public.film_actor' as a FilmActor.
//
// Generated from index 'idx_fk_film_id'.
func FilmActorsByFilmID(db XODB, filmID int16) ([]*FilmActor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`actor_id, film_id, last_update ` +
		`FROM public.film_actor ` +
		`WHERE film_id = $1`

	// run query
	XOLog(sqlstr, filmID)
	q, err := db.Query(sqlstr, filmID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*FilmActor{}
	for q.Next() {
		fa := FilmActor{
			_exists: true,
		}

		// scan
		err = q.Scan(&fa.ActorID, &fa.FilmID, &fa.LastUpdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &fa)
	}

	return res, nil
}
