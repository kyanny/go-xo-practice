// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Language represents a row from 'public.language'.
type Language struct {
	LanguageID int       `json:"language_id"` // language_id
	Name       string    `json:"name"`        // name
	LastUpdate time.Time `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Language exists in the database.
func (l *Language) Exists() bool {
	return l._exists
}

// Deleted provides information if the Language has been deleted from the database.
func (l *Language) Deleted() bool {
	return l._deleted
}

// Insert inserts the Language to the database.
func (l *Language) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.language (` +
		`language_id, name, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, l.LanguageID, l.Name, l.LastUpdate)
	err = db.QueryRow(sqlstr, l.LanguageID, l.Name, l.LastUpdate).Scan(&l.LanguageID)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Update updates the Language in the database.
func (l *Language) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if l._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.language SET (` +
		`name, last_update` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE language_id = $3`

	// run query
	XOLog(sqlstr, l.Name, l.LastUpdate, l.LanguageID)
	_, err = db.Exec(sqlstr, l.Name, l.LastUpdate, l.LanguageID)
	return err
}

// Save saves the Language to the database.
func (l *Language) Save(db XODB) error {
	if l.Exists() {
		return l.Update(db)
	}

	return l.Insert(db)
}

// Upsert performs an upsert for Language.
//
// NOTE: PostgreSQL 9.5+ only
func (l *Language) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if l._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.language (` +
		`language_id, name, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (language_id) DO UPDATE SET (` +
		`language_id, name, last_update` +
		`) = (` +
		`EXCLUDED.language_id, EXCLUDED.name, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, l.LanguageID, l.Name, l.LastUpdate)
	_, err = db.Exec(sqlstr, l.LanguageID, l.Name, l.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	l._exists = true

	return nil
}

// Delete deletes the Language from the database.
func (l *Language) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !l._exists {
		return nil
	}

	// if deleted, bail
	if l._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.language WHERE language_id = $1`

	// run query
	XOLog(sqlstr, l.LanguageID)
	_, err = db.Exec(sqlstr, l.LanguageID)
	if err != nil {
		return err
	}

	// set deleted
	l._deleted = true

	return nil
}

// LanguageByLanguageID retrieves a row from 'public.language' as a Language.
//
// Generated from index 'language_pkey'.
func LanguageByLanguageID(db XODB, languageID int) (*Language, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`language_id, name, last_update ` +
		`FROM public.language ` +
		`WHERE language_id = $1`

	// run query
	XOLog(sqlstr, languageID)
	l := Language{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, languageID).Scan(&l.LanguageID, &l.Name, &l.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &l, nil
}
