// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"
	"errors"
	"time"
)

// Staff represents a row from 'public.staff'.
type Staff struct {
	StaffID    int            `json:"staff_id"`    // staff_id
	FirstName  string         `json:"first_name"`  // first_name
	LastName   string         `json:"last_name"`   // last_name
	AddressID  int16          `json:"address_id"`  // address_id
	Email      sql.NullString `json:"email"`       // email
	StoreID    int16          `json:"store_id"`    // store_id
	Active     bool           `json:"active"`      // active
	Username   string         `json:"username"`    // username
	Password   sql.NullString `json:"password"`    // password
	LastUpdate time.Time      `json:"last_update"` // last_update
	Picture    []byte         `json:"picture"`     // picture

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Staff exists in the database.
func (s *Staff) Exists() bool {
	return s._exists
}

// Deleted provides information if the Staff has been deleted from the database.
func (s *Staff) Deleted() bool {
	return s._deleted
}

// Insert inserts the Staff to the database.
func (s *Staff) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.staff (` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`)`

	// run query
	XOLog(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture)
	err = db.QueryRow(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture).Scan(&s.StaffID)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Update updates the Staff in the database.
func (s *Staff) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if s._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.staff SET (` +
		`first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10` +
		`) WHERE staff_id = $11`

	// run query
	XOLog(sqlstr, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture, s.StaffID)
	_, err = db.Exec(sqlstr, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture, s.StaffID)
	return err
}

// Save saves the Staff to the database.
func (s *Staff) Save(db XODB) error {
	if s.Exists() {
		return s.Update(db)
	}

	return s.Insert(db)
}

// Upsert performs an upsert for Staff.
//
// NOTE: PostgreSQL 9.5+ only
func (s *Staff) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if s._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.staff (` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11` +
		`) ON CONFLICT (staff_id) DO UPDATE SET (` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture` +
		`) = (` +
		`EXCLUDED.staff_id, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.address_id, EXCLUDED.email, EXCLUDED.store_id, EXCLUDED.active, EXCLUDED.username, EXCLUDED.password, EXCLUDED.last_update, EXCLUDED.picture` +
		`)`

	// run query
	XOLog(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture)
	_, err = db.Exec(sqlstr, s.StaffID, s.FirstName, s.LastName, s.AddressID, s.Email, s.StoreID, s.Active, s.Username, s.Password, s.LastUpdate, s.Picture)
	if err != nil {
		return err
	}

	// set existence
	s._exists = true

	return nil
}

// Delete deletes the Staff from the database.
func (s *Staff) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !s._exists {
		return nil
	}

	// if deleted, bail
	if s._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.staff WHERE staff_id = $1`

	// run query
	XOLog(sqlstr, s.StaffID)
	_, err = db.Exec(sqlstr, s.StaffID)
	if err != nil {
		return err
	}

	// set deleted
	s._deleted = true

	return nil
}

// Address returns the Address associated with the Staff's AddressID (address_id).
//
// Generated from foreign key 'staff_address_id_fkey'.
func (s *Staff) Address(db XODB) (*Address, error) {
	return AddressByAddressID(db, int(s.AddressID))
}

// StaffByStaffID retrieves a row from 'public.staff' as a Staff.
//
// Generated from index 'staff_pkey'.
func StaffByStaffID(db XODB, staffID int) (*Staff, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`staff_id, first_name, last_name, address_id, email, store_id, active, username, password, last_update, picture ` +
		`FROM public.staff ` +
		`WHERE staff_id = $1`

	// run query
	XOLog(sqlstr, staffID)
	s := Staff{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, staffID).Scan(&s.StaffID, &s.FirstName, &s.LastName, &s.AddressID, &s.Email, &s.StoreID, &s.Active, &s.Username, &s.Password, &s.LastUpdate, &s.Picture)
	if err != nil {
		return nil, err
	}

	return &s, nil
}
