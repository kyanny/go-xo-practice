// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Inventory represents a row from 'public.inventory'.
type Inventory struct {
	InventoryID int       `json:"inventory_id"` // inventory_id
	FilmID      int16     `json:"film_id"`      // film_id
	StoreID     int16     `json:"store_id"`     // store_id
	LastUpdate  time.Time `json:"last_update"`  // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Inventory exists in the database.
func (i *Inventory) Exists() bool {
	return i._exists
}

// Deleted provides information if the Inventory has been deleted from the database.
func (i *Inventory) Deleted() bool {
	return i._deleted
}

// Insert inserts the Inventory to the database.
func (i *Inventory) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.inventory (` +
		`inventory_id, film_id, store_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate)
	err = db.QueryRow(sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate).Scan(&i.InventoryID)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Update updates the Inventory in the database.
func (i *Inventory) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if i._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.inventory SET (` +
		`film_id, store_id, last_update` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE inventory_id = $4`

	// run query
	XOLog(sqlstr, i.FilmID, i.StoreID, i.LastUpdate, i.InventoryID)
	_, err = db.Exec(sqlstr, i.FilmID, i.StoreID, i.LastUpdate, i.InventoryID)
	return err
}

// Save saves the Inventory to the database.
func (i *Inventory) Save(db XODB) error {
	if i.Exists() {
		return i.Update(db)
	}

	return i.Insert(db)
}

// Upsert performs an upsert for Inventory.
//
// NOTE: PostgreSQL 9.5+ only
func (i *Inventory) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if i._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.inventory (` +
		`inventory_id, film_id, store_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (inventory_id) DO UPDATE SET (` +
		`inventory_id, film_id, store_id, last_update` +
		`) = (` +
		`EXCLUDED.inventory_id, EXCLUDED.film_id, EXCLUDED.store_id, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate)
	_, err = db.Exec(sqlstr, i.InventoryID, i.FilmID, i.StoreID, i.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	i._exists = true

	return nil
}

// Delete deletes the Inventory from the database.
func (i *Inventory) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !i._exists {
		return nil
	}

	// if deleted, bail
	if i._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.inventory WHERE inventory_id = $1`

	// run query
	XOLog(sqlstr, i.InventoryID)
	_, err = db.Exec(sqlstr, i.InventoryID)
	if err != nil {
		return err
	}

	// set deleted
	i._deleted = true

	return nil
}

// Film returns the Film associated with the Inventory's FilmID (film_id).
//
// Generated from foreign key 'inventory_film_id_fkey'.
func (i *Inventory) Film(db XODB) (*Film, error) {
	return FilmByFilmID(db, int(i.FilmID))
}

// InventoriesByStoreIDFilmID retrieves a row from 'public.inventory' as a Inventory.
//
// Generated from index 'idx_store_id_film_id'.
func InventoriesByStoreIDFilmID(db XODB, storeID int16, filmID int16) ([]*Inventory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`inventory_id, film_id, store_id, last_update ` +
		`FROM public.inventory ` +
		`WHERE store_id = $1 AND film_id = $2`

	// run query
	XOLog(sqlstr, storeID, filmID)
	q, err := db.Query(sqlstr, storeID, filmID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Inventory{}
	for q.Next() {
		i := Inventory{
			_exists: true,
		}

		// scan
		err = q.Scan(&i.InventoryID, &i.FilmID, &i.StoreID, &i.LastUpdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &i)
	}

	return res, nil
}

// InventoryByInventoryID retrieves a row from 'public.inventory' as a Inventory.
//
// Generated from index 'inventory_pkey'.
func InventoryByInventoryID(db XODB, inventoryID int) (*Inventory, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`inventory_id, film_id, store_id, last_update ` +
		`FROM public.inventory ` +
		`WHERE inventory_id = $1`

	// run query
	XOLog(sqlstr, inventoryID)
	i := Inventory{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, inventoryID).Scan(&i.InventoryID, &i.FilmID, &i.StoreID, &i.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &i, nil
}
