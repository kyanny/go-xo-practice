// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Category represents a row from 'public.category'.
type Category struct {
	CategoryID int       `json:"category_id"` // category_id
	Name       string    `json:"name"`        // name
	LastUpdate time.Time `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Category exists in the database.
func (c *Category) Exists() bool {
	return c._exists
}

// Deleted provides information if the Category has been deleted from the database.
func (c *Category) Deleted() bool {
	return c._deleted
}

// Insert inserts the Category to the database.
func (c *Category) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.category (` +
		`category_id, name, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`)`

	// run query
	XOLog(sqlstr, c.CategoryID, c.Name, c.LastUpdate)
	err = db.QueryRow(sqlstr, c.CategoryID, c.Name, c.LastUpdate).Scan(&c.CategoryID)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Update updates the Category in the database.
func (c *Category) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if c._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.category SET (` +
		`name, last_update` +
		`) = ( ` +
		`$1, $2` +
		`) WHERE category_id = $3`

	// run query
	XOLog(sqlstr, c.Name, c.LastUpdate, c.CategoryID)
	_, err = db.Exec(sqlstr, c.Name, c.LastUpdate, c.CategoryID)
	return err
}

// Save saves the Category to the database.
func (c *Category) Save(db XODB) error {
	if c.Exists() {
		return c.Update(db)
	}

	return c.Insert(db)
}

// Upsert performs an upsert for Category.
//
// NOTE: PostgreSQL 9.5+ only
func (c *Category) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if c._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.category (` +
		`category_id, name, last_update` +
		`) VALUES (` +
		`$1, $2, $3` +
		`) ON CONFLICT (category_id) DO UPDATE SET (` +
		`category_id, name, last_update` +
		`) = (` +
		`EXCLUDED.category_id, EXCLUDED.name, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, c.CategoryID, c.Name, c.LastUpdate)
	_, err = db.Exec(sqlstr, c.CategoryID, c.Name, c.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	c._exists = true

	return nil
}

// Delete deletes the Category from the database.
func (c *Category) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !c._exists {
		return nil
	}

	// if deleted, bail
	if c._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.category WHERE category_id = $1`

	// run query
	XOLog(sqlstr, c.CategoryID)
	_, err = db.Exec(sqlstr, c.CategoryID)
	if err != nil {
		return err
	}

	// set deleted
	c._deleted = true

	return nil
}

// CategoryByCategoryID retrieves a row from 'public.category' as a Category.
//
// Generated from index 'category_pkey'.
func CategoryByCategoryID(db XODB, categoryID int) (*Category, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`category_id, name, last_update ` +
		`FROM public.category ` +
		`WHERE category_id = $1`

	// run query
	XOLog(sqlstr, categoryID)
	c := Category{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, categoryID).Scan(&c.CategoryID, &c.Name, &c.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &c, nil
}
