// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
)

// Actor represents a row from 'public.actor'.
type Actor struct {
	ActorID    int       `json:"actor_id"`    // actor_id
	FirstName  string    `json:"first_name"`  // first_name
	LastName   string    `json:"last_name"`   // last_name
	LastUpdate time.Time `json:"last_update"` // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Actor exists in the database.
func (a *Actor) Exists() bool {
	return a._exists
}

// Deleted provides information if the Actor has been deleted from the database.
func (a *Actor) Deleted() bool {
	return a._deleted
}

// Insert inserts the Actor to the database.
func (a *Actor) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.actor (` +
		`actor_id, first_name, last_name, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`)`

	// run query
	XOLog(sqlstr, a.ActorID, a.FirstName, a.LastName, a.LastUpdate)
	err = db.QueryRow(sqlstr, a.ActorID, a.FirstName, a.LastName, a.LastUpdate).Scan(&a.ActorID)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Update updates the Actor in the database.
func (a *Actor) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if a._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.actor SET (` +
		`first_name, last_name, last_update` +
		`) = ( ` +
		`$1, $2, $3` +
		`) WHERE actor_id = $4`

	// run query
	XOLog(sqlstr, a.FirstName, a.LastName, a.LastUpdate, a.ActorID)
	_, err = db.Exec(sqlstr, a.FirstName, a.LastName, a.LastUpdate, a.ActorID)
	return err
}

// Save saves the Actor to the database.
func (a *Actor) Save(db XODB) error {
	if a.Exists() {
		return a.Update(db)
	}

	return a.Insert(db)
}

// Upsert performs an upsert for Actor.
//
// NOTE: PostgreSQL 9.5+ only
func (a *Actor) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if a._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.actor (` +
		`actor_id, first_name, last_name, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4` +
		`) ON CONFLICT (actor_id) DO UPDATE SET (` +
		`actor_id, first_name, last_name, last_update` +
		`) = (` +
		`EXCLUDED.actor_id, EXCLUDED.first_name, EXCLUDED.last_name, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, a.ActorID, a.FirstName, a.LastName, a.LastUpdate)
	_, err = db.Exec(sqlstr, a.ActorID, a.FirstName, a.LastName, a.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	a._exists = true

	return nil
}

// Delete deletes the Actor from the database.
func (a *Actor) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !a._exists {
		return nil
	}

	// if deleted, bail
	if a._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.actor WHERE actor_id = $1`

	// run query
	XOLog(sqlstr, a.ActorID)
	_, err = db.Exec(sqlstr, a.ActorID)
	if err != nil {
		return err
	}

	// set deleted
	a._deleted = true

	return nil
}

// ActorByActorID retrieves a row from 'public.actor' as a Actor.
//
// Generated from index 'actor_pkey'.
func ActorByActorID(db XODB, actorID int) (*Actor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`actor_id, first_name, last_name, last_update ` +
		`FROM public.actor ` +
		`WHERE actor_id = $1`

	// run query
	XOLog(sqlstr, actorID)
	a := Actor{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, actorID).Scan(&a.ActorID, &a.FirstName, &a.LastName, &a.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &a, nil
}

// ActorsByLastName retrieves a row from 'public.actor' as a Actor.
//
// Generated from index 'idx_actor_last_name'.
func ActorsByLastName(db XODB, lastName string) ([]*Actor, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`actor_id, first_name, last_name, last_update ` +
		`FROM public.actor ` +
		`WHERE last_name = $1`

	// run query
	XOLog(sqlstr, lastName)
	q, err := db.Query(sqlstr, lastName)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Actor{}
	for q.Next() {
		a := Actor{
			_exists: true,
		}

		// scan
		err = q.Scan(&a.ActorID, &a.FirstName, &a.LastName, &a.LastUpdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &a)
	}

	return res, nil
}
