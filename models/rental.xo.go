// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"errors"
	"time"
	"github.com/lib/pq"
)

// Rental represents a row from 'public.rental'.
type Rental struct {
	RentalID    int         `json:"rental_id"`    // rental_id
	RentalDate  time.Time   `json:"rental_date"`  // rental_date
	InventoryID int         `json:"inventory_id"` // inventory_id
	CustomerID  int16       `json:"customer_id"`  // customer_id
	ReturnDate  pq.NullTime `json:"return_date"`  // return_date
	StaffID     int16       `json:"staff_id"`     // staff_id
	LastUpdate  time.Time   `json:"last_update"`  // last_update

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Rental exists in the database.
func (r *Rental) Exists() bool {
	return r._exists
}

// Deleted provides information if the Rental has been deleted from the database.
func (r *Rental) Deleted() bool {
	return r._deleted
}

// Insert inserts the Rental to the database.
func (r *Rental) Insert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key must be provided
	const sqlstr = `INSERT INTO public.rental (` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`)`

	// run query
	XOLog(sqlstr, r.RentalID, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate)
	err = db.QueryRow(sqlstr, r.RentalID, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate).Scan(&r.RentalID)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Update updates the Rental in the database.
func (r *Rental) Update(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if r._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE public.rental SET (` +
		`rental_date, inventory_id, customer_id, return_date, staff_id, last_update` +
		`) = ( ` +
		`$1, $2, $3, $4, $5, $6` +
		`) WHERE rental_id = $7`

	// run query
	XOLog(sqlstr, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate, r.RentalID)
	_, err = db.Exec(sqlstr, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate, r.RentalID)
	return err
}

// Save saves the Rental to the database.
func (r *Rental) Save(db XODB) error {
	if r.Exists() {
		return r.Update(db)
	}

	return r.Insert(db)
}

// Upsert performs an upsert for Rental.
//
// NOTE: PostgreSQL 9.5+ only
func (r *Rental) Upsert(db XODB) error {
	var err error

	// if already exist, bail
	if r._exists {
		return errors.New("insert failed: already exists")
	}

	// sql query
	const sqlstr = `INSERT INTO public.rental (` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update` +
		`) VALUES (` +
		`$1, $2, $3, $4, $5, $6, $7` +
		`) ON CONFLICT (rental_id) DO UPDATE SET (` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update` +
		`) = (` +
		`EXCLUDED.rental_id, EXCLUDED.rental_date, EXCLUDED.inventory_id, EXCLUDED.customer_id, EXCLUDED.return_date, EXCLUDED.staff_id, EXCLUDED.last_update` +
		`)`

	// run query
	XOLog(sqlstr, r.RentalID, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate)
	_, err = db.Exec(sqlstr, r.RentalID, r.RentalDate, r.InventoryID, r.CustomerID, r.ReturnDate, r.StaffID, r.LastUpdate)
	if err != nil {
		return err
	}

	// set existence
	r._exists = true

	return nil
}

// Delete deletes the Rental from the database.
func (r *Rental) Delete(db XODB) error {
	var err error

	// if doesn't exist, bail
	if !r._exists {
		return nil
	}

	// if deleted, bail
	if r._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM public.rental WHERE rental_id = $1`

	// run query
	XOLog(sqlstr, r.RentalID)
	_, err = db.Exec(sqlstr, r.RentalID)
	if err != nil {
		return err
	}

	// set deleted
	r._deleted = true

	return nil
}

// Customer returns the Customer associated with the Rental's CustomerID (customer_id).
//
// Generated from foreign key 'rental_customer_id_fkey'.
func (r *Rental) Customer(db XODB) (*Customer, error) {
	return CustomerByCustomerID(db, int(r.CustomerID))
}

// Inventory returns the Inventory associated with the Rental's InventoryID (inventory_id).
//
// Generated from foreign key 'rental_inventory_id_fkey'.
func (r *Rental) Inventory(db XODB) (*Inventory, error) {
	return InventoryByInventoryID(db, r.InventoryID)
}

// Staff returns the Staff associated with the Rental's StaffID (staff_id).
//
// Generated from foreign key 'rental_staff_id_key'.
func (r *Rental) Staff(db XODB) (*Staff, error) {
	return StaffByStaffID(db, int(r.StaffID))
}

// RentalsByInventoryID retrieves a row from 'public.rental' as a Rental.
//
// Generated from index 'idx_fk_inventory_id'.
func RentalsByInventoryID(db XODB, inventoryID int) ([]*Rental, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update ` +
		`FROM public.rental ` +
		`WHERE inventory_id = $1`

	// run query
	XOLog(sqlstr, inventoryID)
	q, err := db.Query(sqlstr, inventoryID)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Rental{}
	for q.Next() {
		r := Rental{
			_exists: true,
		}

		// scan
		err = q.Scan(&r.RentalID, &r.RentalDate, &r.InventoryID, &r.CustomerID, &r.ReturnDate, &r.StaffID, &r.LastUpdate)
		if err != nil {
			return nil, err
		}

		res = append(res, &r)
	}

	return res, nil
}

// RentalByRentalDateInventoryIDCustomerID retrieves a row from 'public.rental' as a Rental.
//
// Generated from index 'idx_unq_rental_rental_date_inventory_id_customer_id'.
func RentalByRentalDateInventoryIDCustomerID(db XODB, rentalDate time.Time, inventoryID int, customerID int16) (*Rental, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update ` +
		`FROM public.rental ` +
		`WHERE rental_date = $1 AND inventory_id = $2 AND customer_id = $3`

	// run query
	XOLog(sqlstr, rentalDate, inventoryID, customerID)
	r := Rental{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, rentalDate, inventoryID, customerID).Scan(&r.RentalID, &r.RentalDate, &r.InventoryID, &r.CustomerID, &r.ReturnDate, &r.StaffID, &r.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &r, nil
}

// RentalByRentalID retrieves a row from 'public.rental' as a Rental.
//
// Generated from index 'rental_pkey'.
func RentalByRentalID(db XODB, rentalID int) (*Rental, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`rental_id, rental_date, inventory_id, customer_id, return_date, staff_id, last_update ` +
		`FROM public.rental ` +
		`WHERE rental_id = $1`

	// run query
	XOLog(sqlstr, rentalID)
	r := Rental{
		_exists: true,
	}

	err = db.QueryRow(sqlstr, rentalID).Scan(&r.RentalID, &r.RentalDate, &r.InventoryID, &r.CustomerID, &r.ReturnDate, &r.StaffID, &r.LastUpdate)
	if err != nil {
		return nil, err
	}

	return &r, nil
}
