// Package models contains the types for schema 'public'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql/driver"
	"errors"
)

// MpaaRating is the 'mpaa_rating' enum type from schema 'public'.
type MpaaRating uint16

const (
	// MpaaRatingG is the 'G' MpaaRating.
	MpaaRatingG = MpaaRating(1)

	// MpaaRatingPg is the 'PG' MpaaRating.
	MpaaRatingPg = MpaaRating(2)

	// MpaaRatingPg13 is the 'PG-13' MpaaRating.
	MpaaRatingPg13 = MpaaRating(3)

	// MpaaRatingR is the 'R' MpaaRating.
	MpaaRatingR = MpaaRating(4)

	// MpaaRatingNc17 is the 'NC-17' MpaaRating.
	MpaaRatingNc17 = MpaaRating(5)
)

// String returns the string value of the MpaaRating.
func (mr MpaaRating) String() string {
	var enumVal string

	switch mr {
	case MpaaRatingG:
		enumVal = "G"

	case MpaaRatingPg:
		enumVal = "PG"

	case MpaaRatingPg13:
		enumVal = "PG-13"

	case MpaaRatingR:
		enumVal = "R"

	case MpaaRatingNc17:
		enumVal = "NC-17"
	}

	return enumVal
}

// MarshalText marshals MpaaRating into text.
func (mr MpaaRating) MarshalText() ([]byte, error) {
	return []byte(mr.String()), nil
}

// UnmarshalText unmarshals MpaaRating from text.
func (mr *MpaaRating) UnmarshalText(text []byte) error {
	switch string(text) {
	case "G":
		*mr = MpaaRatingG

	case "PG":
		*mr = MpaaRatingPg

	case "PG-13":
		*mr = MpaaRatingPg13

	case "R":
		*mr = MpaaRatingR

	case "NC-17":
		*mr = MpaaRatingNc17

	default:
		return errors.New("invalid MpaaRating")
	}

	return nil
}

// Value satisfies the sql/driver.Valuer interface for MpaaRating.
func (mr MpaaRating) Value() (driver.Value, error) {
	return mr.String(), nil
}

// Scan satisfies the database/sql.Scanner interface for MpaaRating.
func (mr *MpaaRating) Scan(src interface{}) error {
	buf, ok := src.([]byte)
	if !ok {
		return errors.New("invalid MpaaRating")
	}

	return mr.UnmarshalText(buf)
}
